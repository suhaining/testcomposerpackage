{
  "name": "suhaining/testcomposerpackage",//包的名称
  "type": "library",//说明包的类型，支持如下library,project,metapackage,composer-plugin，默认为library
  "description": "some small tools",//应用简介尽量短
  "keywords": ["tools"], //关键词的值是一个字符串数组，在发布成公用库的是时候，作为元数据信息，有利于包的搜索和发现。
  "license": "MIT",//如果你决定将包公开发布，那么记得选择一个合适的许可证。这样别的程序员在引用包的时候，通过查看许可证，确保没有法律上的问题。
  "homepage": "https://github.com/suhaining/suning",//主页，可以放你想放的任何页面地址。
  "require": {
      "php": "^7.0" //名字部分会作为vendor下的路径进行创建
                    //版本支持精确的版本号，也支持范围如>=1.0; >=1.0,<2.0; ","作为逻辑与，而"!"作为逻辑或的意思。示例中使用了通配符*
                    //版本也支持tag或branch名称。
  },
  "require-dev": {
      "phpunit/phpunit": "^6.5"//类似require
  },
  "autoload": {
      "psr-4": {
          "SuNingTestComposerPackage\\": "src/"
      }
  }
}
// autoload 说明：composer支持PSR-0,PSR-4,classmap及files包含以支持文件自动加载。PSR-4为推荐方式。
//    2.1 Files类型
//    格式："autoload":{"files":["path/to/1.php","path/to/2.php",...]}
//    支持将数组中的文件进行自动加载，文件的路径相对于项目的根目录。缺点是麻烦，需要将所有文件都写进配置。
//    2.2 classmap类型
//    格式："autoload":{"classmap": ["path/to/src1","path/to/src2",...]}
//    支持将数组中的路径下的文件进行自动加载。其很方便，但缺点是一旦增加了新文件，需要执行dump-autoload命令重新生成映射  文件vendor/composer/autoload_classmap.php。
//    2.3 psr-0类型
//    格式："autoload":

//                              {

//                                     "psr-0":

//                                               {

//                                                        "name1\\space\\":["path/",...],
//                                                         "name2\\space\\":["path2/",...],
//                                                }
//                               }
//     支持将命名空间映射到路径。命名空间结尾的\\不可省略。当执行install或update时，加载信息会写入vendor/composer/autoload_namespace.php文件。如果希望解析指定路径下的所有命名空间，则将命名空间置为空串即可。
//     需要注意的是对应name2\space\Foo类的类文件的路径为path2/name2/space/Foo.php
//     2.4 psr-4类型
//     格式："autoload":

//                                {

//                                        "psr-4":

//                                                  {

//                                                           "name1\\space\\":["path/",...],
//                                                           "name2\\space\\":["path2/",...],
//                                                  }
//                                 }
//      支持将命名空间映射到路径。命名空间结尾的\\不可省略。当执行install或update时，加载信息会写入vendor/composer/autoload_psr4.php文件。如果希望解析指定路径下的所有命名空间，则将命名空间置为空串即可。
//      需要注意的是对应name2\space\Foo类的类文件的路径为path2/space/Foo.php，name2不出现在路径中。
//      PSR-4和PSR-0最大的区别是对下划线（underscore)的定义不同。PSR-4中，在类名中使用下划线没有任何特殊含义。而PSR-0则规定类名中的下划线_会被转化成目录分隔符。


